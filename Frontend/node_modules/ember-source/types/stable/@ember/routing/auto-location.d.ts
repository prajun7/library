declare module '@ember/routing/auto-location' {
  import EmberObject from '@ember/object';
  import type { ILocation as EmberLocation, UpdateCallback } from '@ember/routing/location';
  /**
    @module @ember/routing/auto-location
    */
  /**
      AutoLocation will select the best location option based off browser
      support with the priority order: history, hash, none.

      Clean pushState paths accessed by hashchange-only browsers will be redirected
      to the hash-equivalent and vice versa so future transitions are consistent.

      Keep in mind that since some of your users will use `HistoryLocation`, your
      server must serve the Ember app at all the routes you define.

      Browsers that support the `history` API will use `HistoryLocation`, those that
      do not, but still support the `hashchange` event will use `HashLocation`, and
      in the rare case neither is supported will use `NoneLocation`.

      Example:

      ```app/router.js
      Router.map(function() {
        this.route('posts', function() {
          this.route('new');
        });
      });

      Router.reopen({
        location: 'auto'
      });
      ```

      This will result in a posts.new url of `/posts/new` for modern browsers that
      support the `history` api or `/#/posts/new` for older ones, like Internet
      Explorer 9 and below.

      When a user visits a link to your application, they will be automatically
      upgraded or downgraded to the appropriate `Location` class, with the URL
      transformed accordingly, if needed.

      Keep in mind that since some of your users will use `HistoryLocation`, your
      server must serve the Ember app at all the routes you define.

      @class AutoLocation
      @static
      @protected
    */
  export default class AutoLocation extends EmberObject implements EmberLocation {
    getURL: () => string;
    setURL: (url: string) => void;
    onUpdateURL: (callback: UpdateCallback) => void;
    formatURL: (url: string) => string;
    concreteImplementation?: EmberLocation;
    implementation: string;
    /** @internal */
    documentMode: number | undefined;
    /**
          @private
      
          Will be pre-pended to path upon state change.
      
          @since 1.5.1
          @property rootURL
          @default '/'
        */
    rootURL: string;
    /**
          @private
      
          The browser's `location` object. This is typically equivalent to
          `window.location`, but may be overridden for testing.
      
          @property location
          @default environment.location
        */
    location: Location;
    /**
          @private
      
          The browser's `history` object. This is typically equivalent to
          `window.history`, but may be overridden for testing.
      
          @since 1.5.1
          @property history
          @default environment.history
        */
    history: any;
    /**
         @private
      
          The user agent's global variable. In browsers, this will be `window`.
      
          @since 1.11
          @property global
          @default window
        */
    global: any;
    /**
          @private
      
          The browser's `userAgent`. This is typically equivalent to
          `navigator.userAgent`, but may be overridden for testing.
      
          @since 1.5.1
          @property userAgent
          @default environment.history
        */
    userAgent: string;
    /**
          @private
      
          This property is used by the router to know whether to cancel the routing
          setup process, which is needed while we redirect the browser.
      
          @since 1.5.1
          @property cancelRouterSetup
          @default false
        */
    cancelRouterSetup: boolean;
    /**
         Called by the router to instruct the location to do any feature detection
         necessary. In the case of AutoLocation, we detect whether to use history
         or hash concrete implementations.
      
         @private
        */
    detect(): void;
    willDestroy(): void;
  }
  /**
      @private

      Returns the current path as it should appear for HistoryLocation supported
      browsers. This may very well differ from the real current path (e.g. if it
      starts off as a hashed URL)
    */
  export function getHistoryPath(rootURL: string, location: Location): string;
  /**
      @private

      Returns the current path as it should appear for HashLocation supported
      browsers. This may very well differ from the real current path.

      @method _getHashPath
    */
  export function getHashPath(rootURL: string, location: Location): string;
}
